<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>https://blog.imalan.cn/</id><title>无文字 | 三无计划</title><updated>2019-12-17T11:15:05.318707+08:06</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email></author><link href="https://blog.imalan.cn/" rel="alternate"/><generator uri="http://lkiesow.github.io/python-feedgen" version="0.8.0">python-feedgen</generator><logo>${site_prefix}android-chrome-512x512.png</logo><subtitle>只坚持一种正义。我的正义。</subtitle><entry><id>https://blog.imalan.cn/archives/405/</id><title>少数派聚会、在地铁站啜泣的女孩</title><updated>2019-12-17T11:15:05.319031+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;7 月 13 日少数派来北京举行了一场线下聚会，主题是「跟那些过去聊聊」。之所以叫这个名字，是因为举办地在中国第一家苹果电脑博物馆即北京中关村创业博物馆。少数派创始人老麦与博物馆主理人张淼都上台分享了一些关于创业、关于理想的故事，另外请来一位少数派作者吕江涛以及 MarginNote 开发者 Min 分别分享了自己领域的心得。&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 33.333333333333336" data-width="1080" data-height="1620"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/053dbabfc97b023e6322e701a2325fdd.jpg" alt="与老麦合影" /&gt;&lt;figcaption&gt;与老麦合影&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 75.0" data-width="4032" data-height="2688"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/ea894ca983d6a58bf29e4a8ee582f0d7.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;整个活动还是很充实的。参加少数派线下聚会是我期待已久的事情，但奈何其大本营在深圳，迟迟没有来北京举办；这一次也不只是少数派聚会，还有介绍宣传创业博物馆的意图。&lt;/p&gt;
&lt;p&gt;对少数派我是很有感情的。因为第一次写教程文章被人读到并且收获许多正面评价就是在少数派的 Matrix 社区，那也是我第一次收到稿费。当时大概是大二大三的样子，兴趣正浓、势头正劲，每天会花很多时间折腾各种应用各种工具，也努力钻研自动化和效率流程。那时与效率圈子里的同好交流频繁，特别从少数派目前的主编 JailbreakHum 身上学到了很多做事的态度，可以说是受益至今吧。&lt;/p&gt;
&lt;p&gt;后来渐渐起了一些变化。随着 Hum、文刀、千千主理的科技播客 Checked 停播、少数派改版、自己也临近毕业渐渐忙碌起来，我逐渐不再花太多时间了解新的 App、折腾新的技术，也很少再与圈子里的同好交流，仅仅是偶尔在微博上发表一些简短的看法。Hum 似乎从社交媒体毕业，现在很少能看到他的动态，应该是把主要的精力放在制作少数派的付费内容上了。&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 75.0" data-width="4032" data-height="2688"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/4c4e6a8bb64f747c5bffb0903256538b.jpg" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 83.9300582847627" data-width="4032" data-height="2402"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/7088fcf3987dd44873ea2e246d97660a.jpg" alt="经典的彩色 iMac 系列" /&gt;&lt;figcaption&gt;经典的彩色 iMac 系列&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;少数派上次的改版是一个很重要的改变。这次聚会老麦聊到，2017 年底少数派已经到了很艰难的时刻，他能靠着借来的 100 万硬撑下来，完全靠着少数派目前看来相当成功的转型，即推出付费内容、付费教程，直至今年，少数派已经稍有盈利。&lt;/p&gt;
&lt;p&gt;这次改版商业上相当成功，但是也有一些人不喜欢。比如我，就觉得网站体验甚至不如以前；而且文章开始变得，怎么说呢，「油腻」起来了。另一个变化是少数派的稿酬结算方案，在改版前，发在 Matrix 的文章只要被推上首页就能获得稿酬，比如像我这样；改版后，必须要成为签约作者、保证产出才行，门槛高了不少，这无疑打击了了许多「业余作者」的积极性。我在微博上发牢骚，抱怨少数派现在「社区氛围很淡」，老麦回应说「现在随便写写的确实不太顾得上了」，也就是明确地说明，少数派仍然是媒体，重心不在社区。&lt;/p&gt;
&lt;p&gt;但是这次惊喜的是老麦表示有计划对 Matrix 社区进行重造，更改稿酬结算方案，更贴近之前的方案，并且引入包括推荐、量化、结算在内的自动化流程，这让我非常期待。我向来相信社区的力量，有非常多厉害的人都藏在社区里，但他们中很多没有出来分享，引诱他们现身绝对是社区主理人的重要任务。不过老麦也说，&lt;a href="https://beta.sspai.com"&gt;新版少数派&lt;/a&gt;目前的重点还是先把首页做好，Matrix 改造属于下一步工作。Matrix 从少数派创立伊始就在整个版图中有着重要的地位，老麦还有很多想法待尝试与验证。&lt;/p&gt;
&lt;p&gt;现在回想起来，少数派的一系列决定确实相当明智。现金流不足当然无法维持慷慨的稿酬、文章晦涩难懂自然难以得到有效的传播。我作为旁观者，真心的希望少数派这类良心媒体不仅能走下去，还能过得很好。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;聚会当晚有个小插曲。当时我与朋友唱完 K 准备回寝，在五道口地铁站遇到了一位缩在长凳上啜泣的女生，与我年龄相仿，身边放着一个电脑包，看上去像是学生或者公司职员。&lt;/p&gt;
&lt;p&gt;也许是因为失恋，也许是因为被老板责备，也许是因为加班到末班车时刻带来的疲惫，她看上去很难过，也很累。我不是会去安慰人的类型，但可能五道口的特殊气质使然，我走近她说：「别太难过了，问题不大……累了休息一下也挺好的」，对方随即抬起头抹掉眼角的泪水，挤出笑容对我点点头，然后又把脸埋回了手臂。我没有再说什么。&lt;/p&gt;
&lt;p&gt;过一会儿传来了更清晰的哭泣声，不知道是因为更难过了还是想开了什么。地铁已经到站，我只能上车留下她继续休息。&lt;/p&gt;
&lt;p&gt;现代人非常可怜，即使被现实压迫到午夜缩在地铁站哭泣，也不能有什么像样的反抗。这样的事情天天都在发生，「悲喜世间烂剧，昼夜轮播不停」。我们都知道自己的悲喜太渺小，无法激起任何涟漪，只能稍微掉几滴泪然后打起精神继续挣扎。我们没法一走了之，没法浪迹天涯，因为冲不破社会这个坚固的牢笼。&lt;/p&gt;
&lt;p&gt;也不必太绝望。虽然不能改变的事情很多，但我们永远可以改变自己。自由首先是精神上的概念，然后才是空间上的概念。&lt;/p&gt;
</content><link href="https://blog.imalan.cn/archives/405/" rel="alternate"/><published>2019-07-14T23:06:00+08:06</published></entry><entry><id>https://blog.imalan.cn/archives/421/</id><title>泛用人形决战兵器 ─ EVA 初号机、装配完毕！</title><updated>2019-12-17T11:15:05.319007+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;朋友最近沉迷高达模型不可自拔，于是送了一个 EVA 初号机模型给我作为生日礼物，企图拉我入坑。其实我小时候拼过高达，但都是玩的盗版，这次就让我来看看万代正版的实力吧！&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 37.5" data-width="3024" data-height="4032"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/df634d55297c3b105a9a739e39aab9b2.jpg" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 66.66666666666667" data-width="4032" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/ff72a0dc795036910d6432397944de22.jpg" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 66.66666666666667" data-width="4032" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/570ac5934251fec91b706c2fe63fd232.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;说明书内页是日文，一开始担心看不懂，但实际上涉及装配的地方都有非常明了的图示，完全不必担心看不懂，只需要按部就班装配即可。&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 74.9074074074074" data-width="1618" data-height="1080"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/09cec39e0d4722a5c8f006da421da03b.jpg" alt="说明书内页" /&gt;&lt;figcaption&gt;说明书内页&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 75.0" data-width="4032" data-height="2688"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/db30377c0823953ac984ae4146e8dc78.jpg" alt="零件板" /&gt;&lt;figcaption&gt;零件板&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;关于图示我要表扬一下，真的非常细致，各种标记、剖面图都很准确，不知怎的竟然回忆起了本科时被工程制图支配的恐惧。&lt;/p&gt;
&lt;p&gt;模型还原度还是非常高的，连日常看不见的插入栓都有，最终成品上也可随时取出与植入：&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 50.0" data-width="2716" data-height="2716"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/3cafa4e50bc78dc676d3dc9c689fb1ad.jpg" alt="暴露在外部的插入栓" /&gt;&lt;figcaption&gt;暴露在外部的插入栓&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 33.333333333333336" data-width="2688" data-height="4032"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/13a901479bce25a77971299163d5aed6.jpg" alt="上半身组装完成" /&gt;&lt;figcaption&gt;上半身组装完成&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;不知道与高达模型比起来零件算多还是少，由于 EVA 结构比较特别，这个模型又是所有关节都可以活动的，因此有很多细小零件，用剪刀取的时候要特别注意，装配时也要小心，不可用蛮力。&lt;/p&gt;
&lt;p&gt;模型带的武器有：高振动粒子刀（收起状态）、高振动粒子刀（出鞘状态）、Pallet Gun、Gatling Gun，另外还有一个 A-T Field 附件。为了使用这些武器，模型的手部组件就有好几套呢。&lt;/p&gt;
&lt;p&gt;直接看看装配完成的图片吧！（加特林机枪忘了照）&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 50.0" data-width="3024" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/affc8fc705f2947b1003add0e1537763.jpg" alt="初号机出动！" /&gt;&lt;figcaption&gt;初号机出动！&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 50.0" data-width="3024" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/f9430d8b433ff32583eae2283dc7f72a.jpg" alt="Pallet Gun" /&gt;&lt;figcaption&gt;Pallet Gun&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 50.0" data-width="3024" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/a1ec5b220e5be74fde6af8b5836617f6.jpg" alt="A-T Field 撕裂 - 正面" /&gt;&lt;figcaption&gt;A-T Field 撕裂 - 正面&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 50.0" data-width="3024" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/ccb921acb8aab9a255e6302a257b1a7b.jpg" alt="A-T Field 撕裂 - 侧面" /&gt;&lt;figcaption&gt;A-T Field 撕裂 - 侧面&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 50.0" data-width="3024" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/7a8a19823484cf94d21dd0110128f5dd.jpg" alt="高振动粒子刀准备出鞘" /&gt;&lt;figcaption&gt;高振动粒子刀准备出鞘&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 37.5" data-width="3024" data-height="4032"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/003676b032732d6207140ed54451a417.jpg" alt="高振动粒子刀战斗状态" /&gt;&lt;figcaption&gt;高振动粒子刀战斗状态&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;遗憾的是我的细节处理很毛糙。理论上应该把所有的水口（零件与零件板的连接处）用砂纸打磨，最后还要喷消光漆去除塑料感，但是我既没有砂纸也没有漆，就作罢了。如果后续还有机会的话我可能会购置一套工具与漆，到时候再补上吧。&lt;/p&gt;
</content><link href="https://blog.imalan.cn/archives/421/" rel="alternate"/><published>2019-08-18T20:59:00+08:06</published></entry><entry><id>https://blog.imalan.cn/archives/422/</id><title>泸沽湖游记</title><updated>2019-12-17T11:15:05.318952+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;今年暑期觅得两周空闲，赶紧收拾行李赶去与家人朋友相聚。人也真是奇怪，工作时盼着放假，真要放假了却又闲不住。想起之前就与朋友有约要出去自驾游，刚巧几个好友都能凑出时间，那就出发吧！&lt;/p&gt;
&lt;p&gt;这次的目的地是泸沽湖，位于四川与云南交界。该景点由于「亲爱的客栈」播出而名声大振，游人络绎不绝，物价也水涨船高。然而终究受制于当地落后的管理与建设，设施与服务都不尽人意。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;7 月 31 日，一行五人晚饭后从成都出发，驾车至雅安市驶上成昆高速雅西段，直奔西昌。从雅安开始就多为山路，虽已是盛夏，随着海拔攀升再加上一路的绿水青山，倒也不觉得烦闷。大家都喜欢音乐，于是在车内一人一首地点歌，会唱的跟唱，气氛非常欢乐。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 71.39784946236558" data-width="1328" data-height="930"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/9cc7da5d8406117a733dc659d21a50c9.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一路上总体顺利，但仍然有个惊险的插曲。雅西高速西昌出口附近正在施工，道路狭窄，我们跟在一辆小车后面行驶时前方突然急刹并左右摇摆，我们也赶紧急刹，正纳闷怎么回事时发现路面上有很多大小不一的黑色物体，有的高度超过底盘，于是立刻降速并且左右躲闪。最终仍然有一块物体擦到了底盘，幸亏后来检查并无大碍。这段路照明不佳，想起来还是十分后怕，若是驾驶员精神稍有涣散没有及时反应，最终的结果肯定是事故。&lt;/p&gt;
&lt;p&gt;至今也没想明白黑色物体从何而来，或许是山间横风从工地中吹来的，或许是前车掉落的货物。到达西昌已是晚间十点过。五人点外卖填填肚子就洗漱睡觉，准备迎接第二日的旅程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第二日从西昌向泸沽湖景区出发。除开始的一小段高速外就是弯弯曲曲的省道，全是山路，仅 300 多千米的路程足足开了七八个小时。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 96.32034632034632" data-width="1780" data-height="924"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/9e1c0a715b8637362026fa24ddd90565.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一路上肉眼可见风土人情变迁。西昌已是川内出名的民风剽悍之地，但毕竟是市；越接近泸沽湖则越有待开发的少数民族聚集地之感，常住人口也主要是彝族、藏族。我幼年住在藏族自治州，对这种环境甚是熟悉，见此番景观觉得十分亲切。其实不太好形容这类区域给我的感觉，想了半天仍然不能离开「蛮荒」这个听上去有些贬义的词，但必须明白，蕴含在蛮荒背后的是活力、生机与无限的可能性。&lt;/p&gt;
&lt;p&gt;路途遥远，我们不时停车在路边吃零食、聊天、小憩。比起成都平原潮湿闷热的空气，这里显得干爽清新不少。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;大越下午三点到达预定的民宿。住处共两层，楼下是一张大床，我们三个男生准备挤在上面；楼上其实是阁楼，有一张小床，给两位女生住。巨大的落地窗占满了一面墙，屋内明亮宽敞。可惜没留下照片。&lt;/p&gt;
&lt;p&gt;我们安顿好，稍微吃了点干粮，迫不及待地想要去看看湖。民宿距湖边还有一段距离，仍要驾车前往，此时已经快到晚饭时间，于是一瞥美景，收获了下面的照片。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 135.45454545454547" data-width="3427" data-height="1265"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/478af0662a61bd10c2e850b38546222d.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此我对景区有了大概的印象。据说泸沽湖目前正在创建五星级景区，但目前来看还差得太远。虽然有一等的景色，但管理与开发实在太差。基础设施缺乏、湖边被当地居民的摊点占据，甚至拍照都有原住民在守着漫天要价。&lt;/p&gt;
&lt;p&gt;不过我想这其中的大问题还是出在原住民身上。他们受教育程度不高，能想到的也只是守着湖边卖点烤串饰品，无心也无力加入更赚钱的诸如开客栈之类的行列，在外来资本的挤压下，他们的生存空间只会更小。有时，他们对祖辈流传下来的生活方式有一种近乎固执的坚持，这时常成为一种阻碍。&lt;/p&gt;
&lt;p&gt;晚餐去了朋友推荐的一家餐馆，名叫「鱼味」，以景区的标准来看算是美味实惠。五人在半露天的二楼吃饭聊天，十分惬意。专门点了一道名叫「水性杨花」的小菜，这是一种水生植物，春夏季节会伸出水面开白色的花，远看似一片花海。离开的前一天晚我们又去了这家餐馆。同样的座位，服务员换成了一位当地的小姑娘，不到 20 岁的年龄，笑起来十分甜美。我们点饮料时习惯性地说要「肥宅快乐水」，她有点疑惑，我们笑着改口说就是可乐，姑娘也跟着捂嘴笑起来。结账时向店长夸赞这位姑娘做事干练，店长笑着回答说已经有不少客人这么说了，店里正在与她商量以后的职业道路。祝她好运。&lt;/p&gt;
&lt;p&gt;晚餐后去湖边散步，由于欠开发没有太多的光污染，得以一览湖面夜景。&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 75.0" data-width="4032" data-height="2688"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/33b9f85372ff7c6d9e92ed046a5df1a6.jpg" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 75.0" data-width="4032" data-height="2688"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/6e602fcde69527879faafe827bd25c15.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;买了一箱啤酒回到住处，五人玩德州扑克，筹码是喝酒，一口起跳，五口封顶。最终男生平均喝了四五瓶，女生可以折半，一人也是两瓶左右。到后半夜牌玩腻了，开始一句接一句地喝酒聊天，聊生活，聊以往的趣事（我们是初中同学），这一聊知晓不少八卦，甚是有趣。不知不觉已经凌晨三点过。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 66.66666666666667" data-width="4032" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/40db745231303a5830b686f926f11f28.jpg" alt="五人在床上玩德州扑克" /&gt;&lt;figcaption&gt;五人在床上玩德州扑克&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二天的主角是泸沽湖。景区有一条环湖公路，驾车绕一圈即可把湖面大部分风光尽收眼底。适逢天气大好，景色美不胜收。&lt;/p&gt;
&lt;p&gt;第一项活动是划船。早晨的泸沽湖静谧宜人，微风不时吹起涟漪，不久便平静下来，又能尽览湖底植被。远处山腰云雾缭绕，如同仙境。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 135.45454545454547" data-width="3427" data-height="1265"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/f7f62f32988992c3c651de3f6561ebc0.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;终于在湖面看到了「水性杨花」，但可惜很稀疏，据划船的大叔说原本很多的，但游人多起来后餐馆会偷偷摘走做菜，所以现在所剩无几。原来花海都被我们这些游客吃进肚了。划完船阳光逐渐热辣起来，幸亏起了个大早，躲过日晒。&lt;/p&gt;
&lt;p&gt;环湖公路沿途有许多观景台与沙石滩供游人逗留，我们挑选了几处下车。女生忙着拍照，男生顽劣，捡起石子开始打水漂。&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 37.19135802469136" data-width="723" data-height="972"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/2e94468b39c2e16ed4ef39b1fa68fd86.jpg" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 66.66666666666667" data-width="4032" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/52b16aa7674ab433e90cb8b725444922.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 66.66666666666667" data-width="4032" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/f830c8235706396d66607283dbccc5f6.jpg" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 50.0" data-width="3024" data-height="3024"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/7041412a8f3afb34d62c5f1167f25b9e.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 135.45454545454547" data-width="3427" data-height="1265"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/62856fe4c051ea1fc3d39322a1f162d0.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;边走边玩，终于到了里格观景台，在这里留下了我最爱的一张照片：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 135.45454545454547" data-width="3427" data-height="1265"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/db5320a0a1f5b0299265621cf9eb5fa3.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我几乎不能形容看到这景象时的感受。脸上是拂来的微风，视野被硕大的湖面占满，游人的喧闹听不见，毒辣的阳光感受不到，所谓沉浸不过如此。其实已经看过很多壮美的景观了，但这次还是被震撼：蕴含其中的，是大自然怎样的精巧与善意呢？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;还有个打卡处名叫「走婚桥」，名字来源于当地摩梭族的走婚传统。桥上有人给人编发辫，我们怂恿两位女生试了试，还真挺好看。&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 62.24361657597321" data-width="2974" data-height="2389"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/56e78d92249f9754ca6d1c77904c25c3.jpg" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 42.87979244739118" data-width="2975" data-height="3469"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/953da01de5b7d3e3585c332faa9c08d7.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;走婚桥上人特别多，也许大家都想蹭蹭「过桥者能长长久久」的彩头。不过桥头遇到一对吵架的情侣，吵架方式挺奇特，就像在谈合同。&lt;/p&gt;
&lt;p&gt;晚上回到住处，打开阁楼天窗发现夜空晴朗，便有人拿出手机张罗着要拍星星。拍星星的忙着，其他人就每人一瓶啤酒听歌聊天，分享各自拍的照片。&lt;/p&gt;
&lt;p&gt;大家都比较疲惫，这一晚休息得早。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第二天返程全天都在车上度过，听歌、聊天、吃零食、睡觉。到家已经是晚上九点过，至此泸沽湖之旅圆满结束，大家纷纷在群里晒照片，把几个没去成的朋友气得牙痒痒。&lt;/p&gt;
&lt;p&gt;有人说我们几个人一起出去玩时是最轻松的，不用担心能不能玩到一块儿，没有拧巴的人，不用端着，互相知根知底，什么都能聊，没有人扫兴。&lt;/p&gt;
&lt;p&gt;这大概就是十多年的友情吧。说到底，是景色重要，还是游玩重要，还是与友人共度的时光重要呢？对我来说答案倒是显而易见的。&lt;/p&gt;
</content><link href="https://blog.imalan.cn/archives/422/" rel="alternate"/><published>2019-08-25T17:54:00+08:06</published></entry><entry><id>https://blog.imalan.cn/archives/441/</id><title>聊聊「杠精」与评论管理</title><updated>2019-12-17T11:15:05.318931+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;但凡管理社区、网站的博主应该多少都有过这方面的困扰。正巧昨天在一篇文章下面出现了一串&lt;a href="https://blog.imalan.cn/archives/422/comment-page-1#comment-3119"&gt;讨论&lt;/a&gt;，气氛到后来变得不太舒服。我想聊聊我的看法。&lt;/p&gt;
&lt;p&gt;网民形形色色，人与人之间所持立场、思考方式本就大相径庭，出现意见向左或者针锋相对的情况实属再正常不过。因此我并不赞成现在中文互联网上用「杠精」的棒子把异见一概打死的风气。&lt;/p&gt;
&lt;p&gt;为了讨论这个问题，我们首先需要弄明白「杠」到底是什么。&lt;/p&gt;
&lt;p&gt;有水平的「杠」绝不是谬误，他们本身常是逻辑自洽的，只是偏偏选择了一个博主无意强调的或者不想讨论的切入点，置原文主题不顾；抑或是专门把事情往坏处想、往坏处说，因此很难驳倒他们。前面一种情况的例子如&lt;a href="https://blog.imalan.cn/archives/422/"&gt;《泸沽湖游记》&lt;/a&gt;一文下的评论：&lt;/p&gt;
&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;买了一箱啤酒回到住处，五人玩德州扑克，筹码是喝酒，一口起跳，五口封顶。最终男生平均喝了四五瓶，女生可以折半，一人也是两瓶左右。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此处有问题。三男两女，4×3+2×2=16。一箱不够分的。一定是你喝多了，有人耍赖没发现。除非是24瓶的大箱。&lt;/p&gt;
&lt;p&gt;为什么过 “走婚桥” 的寓意是 “过桥者能长长久久”？莫不是我对走婚二字理解有误？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后者如&lt;a href="https://blog.imalan.cn/archives/317/"&gt;《春天、联谊、新耳机》&lt;/a&gt;下的评论：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;据我所知，有的联谊会花钱雇女生来撑场面，不知道你这个遇到的是李逵还是李鬼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些评论说错了吗？并没有。酒的数量确实说不过去，我肯定是记错了；「走婚桥寓意长长久久」在文章结尾稍带提到了，但显然也不是本文重点；可能确有联谊请女生撑场面，但是评论者并不知道我是去北师大与教育学部的女生们联谊，组织者是两校研究生会，但凡了解教育学部的人都应该知道实在没必要请女生来撑场面，但也不好说他一定错了。&lt;/p&gt;
&lt;p&gt;既然没有说错，也没有出现恶意中伤之类的行为，这些评论的存在就是正当的。&lt;/p&gt;
&lt;p&gt;但它们带来的不适感也同样实实在在。如何让访客畅所欲言的同时维护良性的讨论氛围、避免出现「杠」的同时不损害访客的发言权，实在是个难题。&lt;/p&gt;
&lt;p&gt;首先可以确定的是：「删帖」属于下策。删掉发言既不利于把问题讲清楚，也不能从本质上改善社区环境，只会让访客觉得管理员是一个独裁者。即使是令人不适的发言，保留完整的语境供大众评说是更妥当的处理方案。发声是每个人的权利，大家都希望自己的声音能被人听到，这是自然的。「删帖」不折不扣地损害了该权利，此举长期来看不利于社区建设。不能自由说话的社区没有吸引力也没有生命力。&lt;/p&gt;
&lt;p&gt;且不说我等微小的个人博客，大型的社区也苦评论管理已久。Twitter 长期受平台上的仇恨言论困扰，就连 GitHub 也不能杜绝以中国人为首的 issue 区灌水行为。&lt;/p&gt;
&lt;p&gt;删又删不得，骂又骂不得，只能退而求其次把这些评论隐藏起来，求个眼不见心不烦。这种途径国内早有平台采用，例如在知乎上达到某些条件的评论会被&lt;a href="https://www.zhihu.com/question/20120168"&gt;折叠&lt;/a&gt;；少数派的&lt;a href="https://sspai.com/post/55040"&gt;评论规范&lt;/a&gt;规定当踩高于赞时自动折叠评论，&lt;a href="https://sspai.com/post/53759"&gt;这篇文章&lt;/a&gt;的评论区里连老麦（少数派创始人）自己的评论都被折叠了。&lt;/p&gt;
&lt;p&gt;无奈之下，本站也准备尝试这种方案。昨晚我在主题开发版中增加了评论投票的功能，访客可对评论点赞或点踩，当踩的数量超过阈值且踩赞比也高于阈值时，评论会被折叠。当然即使被折叠了也可以手动展开查看，但多少可以告诫别的访客以及评论发起者：这条评论收到了许多 dislike，可能包含过激、断章取义等令人不适的内容。虽然这是个人博客，但也不是一言堂，把决定权交给看客也算是公允吧。&lt;/p&gt;
&lt;p&gt;也有博主觉得烦不胜烦索性关掉评论，直接表示「JOJO 我不做社区了！」，也值得尊重吧。Do more, hassle less.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;特别说明：本文讨论不适用于 spam，我认为广告、灌水评论直接删掉无妨。&lt;/p&gt;
</content><link href="https://blog.imalan.cn/archives/441/" rel="alternate"/><published>2019-08-28T22:47:00+08:06</published></entry><entry><id>https://blog.imalan.cn/archives/446/</id><title>使用 Grid-Stride Loop 复用 CUDA 线程</title><updated>2019-12-17T11:15:05.318908+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;在阅读 CUDA 文档的过程中看到这一篇博文：&lt;a href="https://devblogs.nvidia.com/cuda-pro-tip-write-flexible-kernels-grid-stride-loops/"&gt;CUDA Pro Tip: Write Flexible Kernels with Grid-Stride Loops&lt;/a&gt;，觉得是很不错的思想（技巧），因此记录下来，并且附上一些验证数据。&lt;/p&gt;
&lt;h3&gt;In theory&lt;/h3&gt;
&lt;p&gt;问题起源：一般使用 CUDA 并行计算时，总使用一个线程对应一块数据，例如计算两向量之和：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// device code to compute c = a + b;&lt;/span&gt;
&lt;span class="c1"&gt;// this method assumes we have enough threads to do the computation&lt;/span&gt;
&lt;span class="c1"&gt;// enough means larger than the size of array a, b and c&lt;/span&gt;
&lt;span class="n"&gt;__global__&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// assume we have 1k elements to compute, in this way&lt;/span&gt;
    &lt;span class="c1"&gt;// thread 0 is responsible for c[0] = a[0] + b[0]&lt;/span&gt;
    &lt;span class="c1"&gt;// thread 1 is responsible for c[1] = a[1] + b[1]&lt;/span&gt;
    &lt;span class="c1"&gt;// and so on&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blockIdx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;blockDim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;threadIdx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#define ARRAYSIZE 1000000&lt;/span&gt;
&lt;span class="cp"&gt;#define BLOCKSIZE 1024  &lt;/span&gt;&lt;span class="c1"&gt;// can be any size, better be multiple of 32&lt;/span&gt;

&lt;span class="n"&gt;__host__&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="c1"&gt;// calculate the minmal number of blocks to cover all data&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;numBlocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ARRAYSIZE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BLOCKSIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;BLOCKSIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;addArray&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;numBlocks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BLOCKSIZE&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ARRAYSIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如我们所知，CUDA 中线程组织结构从高到低分为 Grid、Block、Warp 三层，这三层中，每一层都有自己能容纳的最大线程数量，例如在我的设备（1080Ti）上，每个 Block 最多容纳 1024 个线程，每个 Warp 固定是 32 个线程，而每个 Grid 能容纳的数量就比较大了（2147483647, 65535, 65535）。同时还有一个条件，每个 multiprocessor 最大容纳 2048 个线程。总而言之，GPU 虽然能提供大量的线程，但并不是无限的。&lt;/p&gt;
&lt;p&gt;在不讨论显存大小的前提下，总可能出现这样的情况：程序需要的线程数量大于 GPU 可以提供的线程数量。此时上面的代码就不行了，但下面这种处理方式就可以适应：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// another version to compute c = a + b&lt;/span&gt;
&lt;span class="c1"&gt;// this uses grid loop to reuse some threads(if needed)&lt;/span&gt;
&lt;span class="n"&gt;__global__&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addArray_gird_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// total number of threads in one grid&lt;/span&gt;
    &lt;span class="c1"&gt;// which is accessible to one kernel&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;stride&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blockDim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gridDim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blockIdx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;blockDim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;threadIdx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// compute using the whole grid at once&lt;/span&gt;
    &lt;span class="c1"&gt;// the reuse the threads in the same grid&lt;/span&gt;
    &lt;span class="c1"&gt;// assume we have 1k elements to compute, and a stride of 100&lt;/span&gt;
    &lt;span class="c1"&gt;// thread 0 is responsible for c[0] = a[0] + b[0]&lt;/span&gt;
    &lt;span class="c1"&gt;//                             c[100] = a[100] + b[100]...&lt;/span&gt;
    &lt;span class="c1"&gt;// thread 1 is responsible for c[1] = a[1] + b[1]&lt;/span&gt;
    &lt;span class="c1"&gt;//                             c[101] = a[101] + b[101]...&lt;/span&gt;
    &lt;span class="c1"&gt;// and so on&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;stride&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#define ARRAYSIZE 1000000&lt;/span&gt;
&lt;span class="cp"&gt;#define BLOCKSIZE 1024  &lt;/span&gt;&lt;span class="c1"&gt;// can be any size, better be multiple of 32&lt;/span&gt;
&lt;span class="cp"&gt;#define GRIDSIZE 10  &lt;/span&gt;&lt;span class="c1"&gt;// can be any size, better be multipel of multiprocessor count&lt;/span&gt;

&lt;span class="n"&gt;__host__&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="n"&gt;addArray_gird_loop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GRIDSIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BLOCKSIZE&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ARRAYSIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这种实现中，每个线程并不只负责一块数据，而是负责从 index 开始，stride 为步长的一组数据。在 kernel 中每个 for 循环的步长（Stride）刚好是一个 Grid 的大小，因此称作（Grid-Stride Loop）。&lt;/p&gt;
&lt;p&gt;这种实现的特征是 Grid 的大小可以是任意的，因此解决了「线程不够用」的问题。应该注意到，当 Grid 的大小足够大时（大于等于上一种方法计算出的 &lt;code&gt;numBlocks&lt;/code&gt;），这种方法就退化到第一种方法。&lt;/p&gt;
&lt;p&gt;另外还需要注意到，当 &lt;code&gt;GRIDSIZE&lt;/code&gt; 与 &lt;code&gt;BLOCKSIZE&lt;/code&gt; 都取 1 时，GPU 里实际上只有一个线程在跑，于是退化为串行程序。&lt;/p&gt;
&lt;p&gt;文首提到的文章总结了这种思路的几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;伸缩性与线程复用&lt;/strong&gt;。可扩展性是指，这种方法在理论上可以支持任意规模的并行计算，而不受设备提供的最大线程数限制；另外这种实现允许我们采用更合理的 &lt;code&gt;GRIDSIZE&lt;/code&gt;，比如常推荐的，使用 multiprocessor 数量的倍数。线程复用则可以帮助程序省去线程启动与销毁的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;易于调试&lt;/strong&gt;。如上文所述，当 &lt;code&gt;GRIDSIZE&lt;/code&gt; 与 &lt;code&gt;BLOCKSIZE&lt;/code&gt; 都取 1 时程序实际退化为串行程序，这为调试提供了方便（例如在 kernel 中使用 printf 可以得到顺序的结果）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可移植性与可读性&lt;/strong&gt;。这种的写法可以轻易地修改为 CPU 代码，另外还有类似 &lt;a href="https://devblogs.nvidia.com/parallelforall/simple-portable-parallel-c-hemi-2/"&gt;Hemi&lt;/a&gt; 这样的库专门为 Grid-Stride Loop 提供支持，带来了 C++ 11 风格的循环语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HEMI_LAUNCHABLE&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nl"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hemi&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;grid_stride_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;In real world&lt;/h3&gt;
&lt;p&gt;理论上说 Grid-Stride Loop 一切都很美好，但是由于每个线程要进行循环，想必会影响性能，这里我给出自己的测试结果。&lt;/p&gt;
&lt;p&gt;测试设备：GeForce GTX 1080Ti&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CUDA Driver Version / Runtime Version          9.0 / 9.0
CUDA Capability Major/Minor version number:    6.1
Maximum number of threads per multiprocessor:  2048
Maximum number of threads per block:           1024
Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先看不使用 Grid-Stride Loop（GS Loop） 的方法中 &lt;code&gt;GRIDSIZE&lt;/code&gt; 和时间相对 ARRAYSIZE 的变化：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 90.57788944723617" data-width="721" data-height="398"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/fbae2a73d8c495f55a3c450dc010f93c.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;固定 &lt;code&gt;GRIDSIZE=10&lt;/code&gt;，使用 Grid-Stride Loop 的方法：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 96.64879356568365" data-width="721" data-height="373"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/119fca045d06f574cbbea83497ff9c82.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;直观对比两种方法用时：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 90.72681704260651" data-width="724" data-height="399"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/2fe85e370fb8290b3184027d333d388f.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见当 ARRAYSIZE 较大时，两种方法性能有可观的差距。当然，这个测试只是理论上的，实际应用中不可能只用 10 个 Block 来计算。&lt;/p&gt;
&lt;p&gt;另外，若将显存大小纳入讨论则情况会稍有不同。向量相加这个例子中需要为相加的两个向量以及存储结果的一个向量在 GPU 上分配显存，有时会遇到这样的情况：线程还没用完，显存先用完了。这种情况与算法相关，并不是所有的程序都需要这么巨大的显存量，但需要巨大线程数的场景比比皆是。&lt;/p&gt;
&lt;p&gt;另外，如何将其扩展到高维 Tensor 还有待思考。&lt;/p&gt;
</content><link href="https://blog.imalan.cn/archives/446/" rel="alternate"/><published>2019-09-29T17:54:00+08:06</published></entry><entry><id>https://blog.imalan.cn/archives/apple-watch-series-5/</id><title>国庆揽件：Apple Watch 五号机</title><updated>2019-12-17T11:15:05.318886+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;说起来，心情烦闷的时候就喜欢胡吃海喝、大手大脚花钱。国庆更是给我底气，「过节嘛，花点钱也无可厚非」。于是便有了本文主角：Apple Watch Series 5。&lt;/p&gt;
&lt;p&gt;这款手表今年 9 月随 iPhone 11 一同发布。一直以来，9 月的发布会都只有一个重头戏，因为任何产品都很难抢得过 iPhone 的风头，这次的 Apple Watch 也不例外。&lt;/p&gt;
&lt;p&gt;我的上一只 Apple Watch 还是 2015 年发布的「初号机」；之后苹果依次发布了 Series 1-4，直到今年 9 月的 Series 5。初号机发布后，虽然苹果每次发布会都强调「这是世界上卖得最好的智能手表」，甚至是「卖得最好的手表」，但仍无法掩盖市场需求疲软，销售不及预期的现实。很长一段时间里，苹果都拒绝公布 Apple Watch 具体销量。&lt;/p&gt;
&lt;p&gt;这与可穿戴设备逐渐退潮有关，也与初号机的定位定价有关。苹果一开始的算盘是打入时尚市场，走奢侈品路线，以致最贵的一款初号机售价高达 12 万人民币。但时尚界显然不买账，没有哪位名媛愿意戴着一只电子手表出席晚宴。&lt;/p&gt;
&lt;p&gt;苹果开始改变路线，转而聚焦健康领域，这才算是上道了。在后续机型中，苹果大幅改进了 Apple Watch 的传感器性能，陆续加入陀螺仪、GPS、罗盘、蜂窝网络；Series 4 中引入了电极式心率传感器，甚至还支持腕上 ECG；提高了防水级别，以方便游泳运动员使用。软件层面，诸如久坐提醒、正念、摔倒报警、心率报警、环境噪音报警等功能都是苹果的宣传重点。今年发布会上苹果播放了一个短片，由一些因 Apple Watch 而生活得更健康，甚至是捡回一命的人讲述自己的故事： &lt;a href="https://www.youtube.com/watch?v=mx1by12-oF4"&gt;Dear Apple: Face to Face&lt;/a&gt;。&lt;/p&gt;
&lt;iframe data-ratio="0.625" src="//player.bilibili.com/player.html?aid=70338095&amp;cid=121849487&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt;
&lt;/iframe&gt;&lt;p&gt;现在看来，初号机是一款问题多多的产品。从手机到手表，设备本身的变化、应用场景的变化都十分巨大，新的交互模式也需要重新探索。特别让人印象深刻的一点是：初号机真的很慢。初号机的慢不是因为硬件过时，而是从一开始就没有给够性能。我想任何使用过初号机的人都能清晰地回忆起抬手打开一个 App 是什么样的体验。&lt;/p&gt;
&lt;p&gt;简单来说，煎熬得如同地狱。&lt;/p&gt;
&lt;p&gt;更不用提续航。习惯了一颗电池能用上一年半载的石英表，亦或是充一次电能用半月的智能手环，谁能忍受每天一充的手表呢？手表一天一充，simply makes no sense。&lt;/p&gt;
&lt;p&gt;以上这些怨念，有些延续至今，有些在迭代更替中得到解决或者改善，今年发布的 watchOS 6 与「五号机」则是苹果提交的最新答卷。从第一代开始见证一款产品的进化历程是非常有意思的事情，在其中，能看见商业公司的坚持与妥协，也能看见市场的起起伏伏。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;苹果对 Apple Watch 的重视程度从初号机的包装就能看出来，不同于简洁的 iPhone 包装盒，Apple Watch 产品线过度包装很严重。初号机长条形的包装盒拿在手上沉甸甸的，外面是苹果标志性的白色纸盒，里面还有一个精致的纯白塑料盒。细腻的阻尼感，严丝合缝的接口，处处体现着严谨的高级感，甚至让人无从下手。&lt;/p&gt;
&lt;p&gt;这次我从官网下单，预计到货是 12 号，实际上两天就拿到了包裹。外形仍然是长条形，纯白的纸盒上有 Apple Watch 字样的压印。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 91.08159392789373" data-width="1920" data-height="1054"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/a7f8c6868a38442a0f8e5299baa11170.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这只是外包装，展开后才是真正的包装盒。两个盒子叠在一起，上面是手表本体与充电线、适配器，下面则是表带。&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 98.76543209876543" data-width="1920" data-height="972"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/40a624fa7981217e367e3b8c6bb66955.png" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 69.97084548104957" data-width="1920" data-height="1372"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/af7efa0895d08c5a470f818880802040.png" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;表体被一块手感细腻的毛毡套保护起来。以前似乎没有这个设计，平添一丝高级感。刚好用来收纳我的初号机。&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 50.0" data-width="1920" data-height="1920"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/16e1eeb420a8de3cadc8e1af4d2acdf6.jpg" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 50.0" data-width="1920" data-height="1920"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/916ed75c93e65197cd22edbc46f8c7bd.jpg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;完整的包装内容：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 86.33093525179856" data-width="1920" data-height="1112"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/6942f2594829c015572fc04ee39d862b.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与 iPhone 配对设置的过程就略过了。&lt;/p&gt;
&lt;p&gt;前段时间我还买了一只米家石英表。与其说它是智能手表，不如说是能连接手机的普通手表。本来的打算是用来看看时间，并设一个震动闹钟，以免手机闹钟吵醒室友，但没想到它的震动弱到难以察觉。可笑的是其包装上还堂而皇之地写着：「若感觉震动感太弱，请系紧表带」。我不太明白怎么才算紧？要勒到血流不畅吗？&lt;/p&gt;
&lt;p&gt;但米家石英表的好处是续航不错，外观也好看。作为一只「石英表」大概还是及格的。来张合照吧：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 103.8961038961039" data-width="1920" data-height="924"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/6b69ecd903dbb899468d60b4f04f4362.png" alt="米家石英表、初号机、五号机" /&gt;&lt;figcaption&gt;米家石英表、初号机、五号机&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我在微博上说：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;从 Apple Watch 第一代直接跳到 Apple Watch Series 5，我真切地体会到了科技的进步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一方面，watchOS 愈发强大；另一方面，整个手表的运行速度大幅提升，再也不用抬着手等待 App 慢吞吞地启动了。五号机还带来了常亮屏幕，使其可用性提高了一个等级。&lt;/p&gt;
&lt;p&gt;对我来说，最重要的因素，也基本上是吸引我购买它的唯一因素，是其内置的陀螺仪、GPS 与心率传感器，这使我可以脱离 iPhone 只戴手表去跑步，同时得到准确的路径、速度与心率监控信息。另外，Watch 可以与 AirPods 无缝衔接，对我这个跑步必须听点东西的人来说这一点非常重要。&lt;/p&gt;
&lt;p&gt;但同时，这也是 watchOS 做得不太好的地方。要想在手表上独立听歌或者听播客，目前为止选择还是非常有限，似乎很少有开发者愿意真正地去优化手表 App 的体验。我目前的选择是 Overcast 听播客；iTunes 同步音乐至 iPhone 再同步至 Watch。Overcast 传输有时会不稳定，至于 iTunes 嘛……you know.&lt;/p&gt;
&lt;p&gt;今年苹果与几家机构合作，&lt;a href="https://www.apple.com/newsroom/2019/09/apple-announces-three-groundbreaking-health-studies/"&gt;宣布&lt;/a&gt;开启三项全新的研究计划，侧重女性健康、心脏与运动健康、听力健康，Apple Watch 在其中扮演关键角色。这似乎是理所应当的，除 Apple Watch 外，还有哪款产品能有如此广泛的受众，又有能取得如此丰富的传感器数据呢？&lt;/p&gt;
&lt;p&gt;绕不开的一个话题是隐私与数据安全。硅谷公司中，苹果一直扛着隐私保护的大旗，在这方面的立场最为鲜明，也最为苛刻，以至于许多分析师认为在隐私问题上拒绝让步已经对其产生了不利影响。一个例子是苹果拒绝将用户数据上传至服务器，而将依赖大量数据的机器学习算法全部放到用户本机上进行，许多人认为，这是阻碍苹果人工智能研究的一块绊脚石。&lt;/p&gt;
&lt;p&gt;虽然如此，作为消费者的我们最好还是保持警惕。商业公司总能找到出路，但泄漏的隐私不存在找回一说。在换脸 App、DeepNude 大行其道的今天，有必要搞明白一点：密码可以重设，但生物信息是不能改的。把生物认证信息泄露给不可靠的第三方，这就如同把银行卡密码广而告之；二者之间的主要差别是：前者影响更深远，而且目前看来没什么补救措施。&lt;/p&gt;
&lt;p&gt;话又说回产品本身，乔布斯也许不会同意这个观点，但我确实认为一款伟大的产品是商业公司与消费者共同造就的。Apple Watch 从一开始的奢侈品逐渐转变成侧重医疗健康的「实用品」，获得商业成功的同时朝着「make the world a better place」迈进了一步。这样的一番事业，也难怪有人会为之热血沸腾。&lt;/p&gt;
</content><link href="https://blog.imalan.cn/archives/apple-watch-series-5/" rel="alternate"/><published>2019-10-05T15:57:00+08:06</published></entry><entry><id>https://blog.imalan.cn/archives/kaze-no-tani-no-naushika-manga/</id><title>入手《风之谷》漫画</title><updated>2019-12-17T11:15:05.318865+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;《风之谷》（日语：風の谷のナウシカ）是宫崎骏于 1982 至 1994 年间在杂志《Animage》上连载的漫画作品。整个故事以末日幻想为题材，架构在一个过去兴盛的文明受到毁灭，大地严重污染、遍布毒物，以及充斥着巨大异形昆虫的世界里&lt;sup id="fn_ref_1"&gt;&lt;a href="#fn_1"&gt;1&lt;/a&gt;&lt;/sup&gt;。在这个世界里，「散发着毒气的森林（腐海）」不断侵蚀生活场所，人类与虫族时有摩擦，总体上生活在夹缝之中。&lt;/p&gt;
&lt;p&gt;关于剧情先不多说。大多数人对《风之谷》的印象来自宫崎骏监督的同名动画电影，原作得到的关注要少一些。漫画第一辑销量约五万本，动画上映后作品收到大量关注，销量激增。至连载结束前，各册合计销量约 527 万本；连载结束后漫画多次再版，至 2005 年全部累计销售 1100 万本以上。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上都不是重点，这次的主题是开箱新入手的漫画全辑。看了《风之谷》电影后迷上了作品里的世界观，同时被娜乌西卡全面圈粉。考虑到电影只是漫画的部分剧情，并且人物塑造、剧情等都有所简化，我决定入手原作补完整个故事。下单后等了两天，今天中午终于收到了包裹，迫不及待地拆包：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 83.33333333333333" data-width="1920" data-height="1152"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/9d22cdabc5b722add974fe7dfa179003.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;来自台湾东贩出版社，简盒装。由于外包装非常非常严实，因此外观没有什么瑕疵。&lt;/p&gt;
&lt;div class="photos"&gt;
&lt;figure class="pswp-item" style="flex: 30.998851894374283" data-width="1080" data-height="1742"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/68eb3102759392cd9f119119095ab004.png" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 47.285464098073554" data-width="1080" data-height="1142"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/f6cfdb912495ba14d863c8a1f8d9e3dc.png" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;p&gt;相比起普通漫画开本要大一些，差不多是普通杂志的大小。里面每本分册也有塑封膜，拆一本看看内页吧：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 88.95985401459853" data-width="1950" data-height="1096"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/28b552caefdd3955a6735ac6b9750f57.png" alt="" /&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 56.962025316455694" data-width="1080" data-height="948"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/9d8791059a264edc33ab8331f46e6a76.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;印刷质量还不错。&lt;/p&gt;
&lt;p&gt;这也是我第一次看到宫崎骏的画风。宫老的电影作画属于比较清新的，没想到漫画画风相当繁复。当然也与故事的主题有关。现在一般认为宫崎骏主要成就来源于动画电影，漫画作品并不算多，《风之谷》则是难得的、出自宫老本人之手的长篇漫画作品。在漫画领域屡屡碰壁，再加上意识到自己的作品难以突破手冢治虫漫画设下的各种限制，作为漫画家的宫崎骏总体来讲并没有得到很高的成就。&lt;/p&gt;
&lt;p&gt;其实《风之谷》漫画本身在日本漫画史上的地位也算不得十分重要。但即使如此，通过漫画一窥宫崎骏早期的思想与风格还是很有意义。&lt;/p&gt;
&lt;hr&gt;&lt;div class="footnotes"&gt;&lt;ol&gt;&lt;li id="fn_1"&gt;来自维基百科，下文销量数字同。 &lt;a no-style href="#fn_ref_1"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://blog.imalan.cn/archives/kaze-no-tani-no-naushika-manga/" rel="alternate"/><published>2019-10-15T16:40:00+08:06</published></entry><entry><id>https://blog.imalan.cn/archives/the-remains-of-the-day/</id><title>《长日将尽》：一种慰藉</title><updated>2019-12-17T11:15:05.318842+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;《长日将尽》这本书是在高铁上读完的。去程读了三分之一，回程一口气读完。也许列车这一物件与此书气质相合，毕竟石黑一雄正是借由史蒂文斯驾车远游途中的回忆写出了本书。&lt;/p&gt;
&lt;p&gt;以一位老牌英国管家的口吻叙事，让这本书趣味无穷。谨小慎微、面面俱到的语言，有时甚至显得絮絮叨叨，让隐含其中的情感无比细腻。必须认真揣摩才能抓住史蒂文斯镇定自若的叙述中流露出的真情实感；一旦抓住，则让人感触至深，甚至合卷叹息。&lt;/p&gt;
&lt;p&gt;虽然只是一位管家的回忆，展现的图景却相当宏大。一二战期间达林顿府往来无白丁，达官显贵是府上常客；至战后门可罗雀，落到宅邸出售给外国人的境地。历史如同车轮般滚滚向前，其间兴衰交替、人物沉浮，既体现在世界大局上，也体现在每一个小人物身上。&lt;/p&gt;
&lt;p&gt;诺贝尔文学奖给石黑一雄的评语是：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;以其巨大的情感力量，发掘了隐藏在我们与世界的虚幻联系之下的深渊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以小见大是《长日将尽》的一大特色。这或许这不是石黑一雄的本意，他说本书的出发点是想书写：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;你是如何为了成就事业而荒废了你的人生，又是如何在个人的层面上蹉跎了一辈子的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我看来，成书真正达到的高度何止如此。书里涉及的议题非常多，大至世界如何运行，小至职务细节，都借史蒂文斯的口表达了有趣的见解。当然，他绝不会直接说出来，但是通过许多顾左右而言他的叙述，周周转转之下我们还是能揣摩一二。&lt;/p&gt;
&lt;p&gt;不可否认的是，这本书很大程度上是以史蒂文斯为中心的，写他的一生，以及他所经历的巨变。他对「伟大管家」的理解以及对职业精神的追求构成了他做出抉择的依据，也直接导致了他的成就与遗憾。&lt;/p&gt;
&lt;p&gt;坚决声称自己只是旁观者的史蒂文斯对自己以及达林顿勋爵的态度是非常复杂的。一方面坚决地维护「达林顿勋爵是一位真正的绅士」，另一方面又对爵爷亲纳粹的倾向感到不快，甚至拒绝承认自己是达林顿府管家；一方面只字不提对肯顿小姐的感情，一方面又一厢情愿地希望在若干年后请她回府上共事。这是一位非常矛盾的人，恐怕他自己也因为这些矛盾而感到困扰。&lt;/p&gt;
&lt;p&gt;这本书的动人之处是其细致入微的人文关怀。石黑一雄能将藏在事物背后的情感呈给读者，又做到恰到好处、绝无煽动读者的嫌疑。&lt;/p&gt;
&lt;p&gt;这可能就是二三流作者与一流作家的差距。总之，我为能读到这样一部一流作家的一流作品感到无比幸运。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;一件趣事。读《长日将尽》时我不禁想，这要是能由霍普金斯出演拍成电影就好了……合上书，发现书背上写着确实已经在 1993 年拍成了电影，主演也确实就是安东尼·霍普金斯。 ​&lt;/p&gt;
</content><link href="https://blog.imalan.cn/archives/the-remains-of-the-day/" rel="alternate"/><published>2019-10-22T22:35:00+08:06</published></entry><entry><id>https://blog.imalan.cn/archives/view-download-count-of-github-release/</id><title>查看 GitHub Release 下载量</title><updated>2019-12-17T11:15:05.318815+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;有时候也会好奇某个仓库到底被下载了多少次呢……所以写了个 PHP 脚本从 GitHub API 请求数据，然后输出到终端上，大概效果如下：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 75.0814332247557" data-width="1844" data-height="1228"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/e53c5f341e4e1da3367560f869376ef8.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用方法：去 &lt;a href="https://gist.github.com/AlanDecode/29f3e5b876d9ea03b1dc5c2fba8ef808"&gt;AlanDecode/getDownloadInfo.php&lt;/a&gt; 获取代码保存为 getDownloadInfo.php，并修改里面的 &lt;code&gt;$UserName&lt;/code&gt; 和 &lt;code&gt;$RepoName&lt;/code&gt; 两项为你感兴趣的值，然后在命令行中运行 &lt;code&gt;php getDownloadInfo.php&lt;/code&gt; 即可。PHP 需要启用 curl 扩展。&lt;/p&gt;
&lt;p&gt;受 API 限制，Source ​code 和直接下载仓库的无法统计，只能统计 Release 中自己添加的附件。看看 VOID 主题发布版的下载量吧：&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 75.0814332247557" data-width="1844" data-height="1228"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/5a8437dbfa9ec35a49138d2196fa4031.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;啊，还真是少得可怜啊……&lt;/p&gt;
</content><link href="https://blog.imalan.cn/archives/view-download-count-of-github-release/" rel="alternate"/><published>2019-10-27T17:40:00+08:06</published></entry><entry><id>https://blog.imalan.cn/archives/blog-now-powered-by-maverick/</id><title>Maverick - Go My Own Way.</title><updated>2019-12-17T11:15:05.318765+00:00</updated><author><name>熊猫小A</name><email>hi@imalan.cn</email><uri>https://www.imalan.cn</uri></author><content>&lt;p&gt;首先是在少数派上写一些折腾经验，然后是自己基于 WordPress、Typecho 建站，我在各种网络平台上涂鸦也快三年了。这期间尝试了许多写作、建站工具，深感该领域百花齐放，令人眼花缭乱。很长的一段时间里，我沉浸于给博客程序写主题写插件、使用诸如 CDN 等方式优化网站速度、研究 SEO 玄学，不亦乐乎。&lt;/p&gt;
&lt;p&gt;但终究有些厌倦了。Typecho 这类动态博客程序固然方便，然而自己管理一个服务器确实是负担，而且对图片、内容的管理不甚自由，一旦需要迁移就是噩梦一场；若只是在第三方平台上发表东西，就总觉得互联网上少了属于自己的一亩三分地。&lt;/p&gt;
&lt;p&gt;因此我曾几次把目光转向静态博客。诸如 Hexo、Jekyll 这类静态博客生成器让用户在本地编写 Markdown 文本，再由生成器完成从原始文件到博客网页的转换。某种程度上，这类程序让写作者从维护网站的繁琐中解脱出来，而专注创作本身。MWeb、Gridea 作为博客写作工具时也属于此类。&lt;/p&gt;
&lt;p&gt;然而实践下来，仍然有两个问题没能得到解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;博客源文件的管理问题。想要达到真正的内容与展示分离，就不应该限制源文件的存储方式。现在的生成器要么要求把内容存储到自己的库中，要么要求放在生成器目录下的特定位置，某些甚至对目录结构都有要求。这并不是我想要的；&lt;/li&gt;
&lt;li&gt;图片等静态资源的处理问题。Markdown 对图片的处理一直都是痛点。我不希望把图片放在任何第三方图床，且不提上传图片-获得外链-插入外链这个过程多么不便，远程图床还有随时跑路的风险；而现在的生成器又不能很好地处理本地图片，至少处理起来并不优雅。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alan Key 的一句名言，被 Steve Jobs 引用后众人皆知：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;People who are really serious about software should make their own hardware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;拿来活用，则「任何认真对待博客的人都应该自己写博客系统」。这话说起来固然偏执，但确实为吹毛求疵的人指了一条明路。既然现在的轮子都不满意，那就应该造自己的轮子。本着学习与探索的目的，我使用 Python 自己写了一个静态博客生成器，取名 &lt;strong&gt;Maverick&lt;/strong&gt;，开源于 GitHub。它现在正驱动着我的&lt;a href="https://blog.imalan.cn/"&gt;个人博客&lt;/a&gt;与我的&lt;a href="https://wiki.imalan.cn/"&gt;个人 Wiki&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 166.88102893890675" data-width="1038" data-height="311"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/AlanDecode/site-Blog@gh-pages/archives/assets/afc22a324a16fd544bd1e6c4393cde60.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/AlanDecode/Maverick"&gt;&lt;strong&gt;项目主页&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://blog.imalan.cn/"&gt;&lt;strong&gt;个人博客&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://alandecode.github.io/Maverick/"&gt;&lt;strong&gt;演示站点&lt;/strong&gt;&lt;/a&gt; | &lt;strong&gt;欢迎反馈与Star&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在可以说说 Maverick 本身。大致上，它与 Hexo 等相似，都是通过解析 Markdown 文件生成网页。不过我在设计它时考虑到了上文所述的系列问题，并做了针对性的改进。&lt;/p&gt;
&lt;p&gt;首先是 Maverick 对源文件的处理。Maverick &lt;strong&gt;不限制&lt;/strong&gt;源文件的存储位置，你可以把文章目录放在电脑上的任何路径下，例如 Dropbox、iCloud Drive，以便备份、同步、版本管理，以及在任何设备上用任何编辑器写作。Maverick 也&lt;strong&gt;不限制&lt;/strong&gt;源文件的组织结构，你可以按照你喜欢的方式组织它们，按时间、按类别都可以。&lt;/p&gt;
&lt;p&gt;为了达到这一点，Maverick 通过叫做 &lt;code&gt;source_dir&lt;/code&gt; 的选项在指定路径下搜索所有 Markdown 文件，并根据里面提供的信息将它们分门别类，生成日期标签等等。这些内容被称作 &lt;code&gt;frontmatter&lt;/code&gt;，也就是使用 Hexo 等写文章时顶部的使用 &lt;code&gt;---&lt;/code&gt; 包裹起来的那部分东西。这样的设计让以前的内容可以被复用，也便于以后的迁移。&lt;/p&gt;
&lt;p&gt;此外是对图片的处理。Maverick 允许在 Markdown 文件中引用&lt;strong&gt;任何位置&lt;/strong&gt;的图片，并且都能在生成网站时合适地处理它们。若你在原始文本中通过绝对路径或者相对路径引用本地图片，Maverick 会在生成网站时自动寻找它们，并把它们复制到统一的位置，同时修改文章里的引用链接；若通过 URL 引用了远程图片，则（可选地）将它们下载到本地缓存，按本地图片对待。这样处理的好处很多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typora、VS Code 等软件都支持插入与预览本地图片。尤其是 Typora，本身还提供了插入图片时自动将图片复制到相对文章的某个目录的功能，这与 Maverick 的处理方式十分契合；&lt;/li&gt;
&lt;li&gt;通过本地缓存，减小了图片丢失的风险。若图床跑路，你还可以在本地找到一份备份，不会影响你发布的内容；&lt;/li&gt;
&lt;li&gt;虽然目前还没有实现这个功能，但通过本地化以及统一的发布流程，可以实现自动图片处理（例如压缩）；&lt;/li&gt;
&lt;li&gt;可以提前获知图片的大小尺寸等信息，并在网页展示时提供优化的体验（比如图片排版与点击放大）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而这一切都发生在生成站点时，不会对原本的文章有任何影响，不需要在文章里多加什么标注或者声明。只需要用标准的 Markdown 语法引入图片就好。此外，不论是缓存还是尺寸信息，Maverick 都会在生成时缓存下来，不会反反复复地请求与解析。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;除了以上两点改进，Maverick 还自带了一些博客的常用功能，例如 RSS 源生成、&lt;strong&gt;实时搜索&lt;/strong&gt;、Sitemap 等。这一切你都可以在&lt;a href="https://blog.imalan.cn"&gt;我的博客&lt;/a&gt;以及&lt;a href="https://alandecode.github.io/Maverick/"&gt;示例站点&lt;/a&gt;上体验到。目前，Maverick 没有插件机制，但以我自己的体验而言，应该具备了个人博客应有的功能。&lt;/p&gt;
&lt;p&gt;我在 Lepture 开发的 Markdown 解析器 &lt;a href="https://github.com/lepture/mistune"&gt;mistune&lt;/a&gt; 基础上进行扩展，添加了一些 Markdown 语法，使之能够良好地支持代码高亮、行内脚注、数学公式、图片排版等。&lt;/p&gt;
&lt;p&gt;网页端的展示方面，Maverick 使用自带的主题 Galileo。这是一个比较简洁的主题，以文字阅读体验为重心开发，样式上借鉴了&lt;a href="https://anyway.fm/post/"&gt;安妮薇日报&lt;/a&gt;与 &lt;a href="https://github.com/probberechts/hexo-theme-cactus"&gt;hexo-theme-cactus&lt;/a&gt; 的设计。文字排版效果请参见 &lt;a href="https://alandecode.github.io/Maverick/archives/typography/"&gt;Typography - Maverick&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;总之，我从自己的观察与需求出发，自己写了一款静态博客生成器。本文只覆盖了关于 Maverick 的很小的一部分，欢迎各位移步 &lt;a href="https://github.com/AlanDecode/Maverick"&gt;项目主页&lt;/a&gt; 阅读完整的说明。&lt;/p&gt;
&lt;p&gt;这是我用 Python 写的第一个像点样的东西，因此不免有些遗漏与错误，任何建议与反馈都十分欢迎。当然 Star 则是特别欢迎😜。&lt;/p&gt;
&lt;p&gt;那么，就这样，感谢各位阅读。周末愉快~&lt;/p&gt;
</content><link href="https://blog.imalan.cn/archives/blog-now-powered-by-maverick/" rel="alternate"/><published>2019-12-13T11:27:00+08:06</published></entry></feed>